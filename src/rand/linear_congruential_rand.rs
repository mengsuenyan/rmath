/// random number generated by the Linear Congruential Algorithm

use crate::rand::{Seed, Result, RandError, RandErrKind, Source};

/// Linear Congruential Generator Algorithms
/// $$
/// x_{n+1} = (a * x_n + c) \mod m
/// $$
pub struct LinearCongruentialRand<T> {
    a: T,
    c: T,
    m: T,
    x: T,
}

macro_rules! lcr_impl {
    ($Type0: ty, $FnSeed: ident) => {
        impl LinearCongruentialRand<$Type0> {
            pub fn new<Sd: Seed>(sd: &Sd, a: $Type0, c: $Type0, m: $Type0) -> Result<Self> {
                if m == 0 {
                    Err(RandError::new(RandErrKind::DivisorIsZero, ""))
                } else {
                    sd.$FnSeed().map(|x| {
                    Self {a,c,m,x}
                    })
                }
            }
            
            fn gen_inner(&mut self) -> $Type0 {
                let tmp = (((self.a).overflowing_mul(self.x).0).overflowing_add(self.c).0) % self.m;
                self.x = tmp;
                tmp
            }
        }
   };
}

lcr_impl!(u32, seed_u32);
lcr_impl!(u64, seed_u64);

impl Source for LinearCongruentialRand<u32> {
    fn gen_u32(&mut self) -> Result<u32> {
        Ok(self.gen_inner())
    }

    fn reset<Sd: Seed>(&mut self, sd: &Sd) -> Result<()> {
        sd.seed_u32().map(|x| {
            self.x = x;
        })
    }
}

impl Source for LinearCongruentialRand<u64> {
    fn gen_u32(&mut self) -> Result<u32> {
        const MASK: u64 = core::u32::MAX as u64;
        Ok((self.gen_inner() & MASK) as u32)
    }

    fn reset<Sd: Seed>(&mut self, sd: &Sd) -> Result<()> {
        sd.seed_u64().map(|x| {
            self.x = x;
        })
    }

    fn gen_u64(&mut self) -> Result<u64> {
        Ok(self.gen_inner())
    }
}

/// $Sd must be the instance of the Seed trait
/// Discovered in 1969 by Lewis, Goodman and Miller, adopted as "Minimal standard" in 1988 by Park and Miller 
#[macro_export]
macro_rules! minstd_rand0 {
    ($Sd: ident) => {
        LinearCongruentialRand::<u32>::new(&$Sd, 16807u32, 0u32, 2147483647u32)
    };
}

/// $Sd must be the instance of the Seed trait
/// Newer "Minimum standard", recommended by Park, Miller, and Stockmeyer in 1993
#[macro_export]
macro_rules! minstd_rand {
    ($Sd: ident) => {
        LinearCongruentialRand::<u32>::new(&$Sd, 48271u32, 0u32, 2147483647u32)
    };
}